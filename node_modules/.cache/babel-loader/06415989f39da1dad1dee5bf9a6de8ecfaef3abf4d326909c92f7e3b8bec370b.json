{"ast":null,"code":"const apiKey = process.env.REACT;\nexport const getResponse = async inputText => {\n  try {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer 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`\n      },\n      body: JSON.stringify({\n        \"model\": \"gpt-3.5-turbo\",\n        // or another model version\n        \"messages\": [{\n          \"role\": \"user\",\n          \"content\": inputText\n        }],\n        \"temperature\": 0.7\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('apiCalls', data); // Use the stored data for logging or other purposes\n    return data;\n  } catch (error) {\n    console.error('Error calling OpenAI API:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["apiKey","process","env","REACT","getResponse","inputText","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","console","log","error"],"sources":["/Users/edwinchalmers/turing_work/3mod/dungeongpt/src/apiCalls.js"],"sourcesContent":["const apiKey = process.env.REACT\n\nexport const getResponse = async (inputText) => {\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer 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`\n        },\n        body: JSON.stringify({\n          \"model\": \"gpt-3.5-turbo\", // or another model version\n          \"messages\": [{ \"role\": \"user\", \"content\": inputText }],\n          \"temperature\": 0.7\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('apiCalls', data); // Use the stored data for logging or other purposes\n      return data;\n      \n    } catch (error) {\n      console.error('Error calling OpenAI API:', error);\n      return null;\n    }\n  };\n  "],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,KAAK;AAEhC,OAAO,MAAMC,WAAW,GAAG,MAAOC,SAAS,IAAK;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MACzEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnB,OAAO,EAAE,eAAe;QAAE;QAC1B,UAAU,EAAE,CAAC;UAAE,MAAM,EAAE,MAAM;UAAE,SAAS,EAAEP;QAAU,CAAC,CAAC;QACtD,aAAa,EAAE;MACjB,CAAC;IACH,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBR,QAAQ,CAACS,MAAO,EAAC,CAAC;IAC3D;IACA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEH,IAAI,CAAC,CAAC,CAAC;IAC/B,OAAOA,IAAI;EAEb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}