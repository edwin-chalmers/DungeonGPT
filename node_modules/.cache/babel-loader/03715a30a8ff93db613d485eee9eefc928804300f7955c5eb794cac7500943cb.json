{"ast":null,"code":"var _jsxFileName = \"/Users/edwinchalmers/turing_work/3mod/dungeongpt/src/Components/ChatBox/ChatBox.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { EnterButton, StyledChatBox } from \"./ChatBox.styled.js\";\nimport { getResponse } from \"../../apiCalls.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatBox({\n  onNewMessage\n}) {\n  _s();\n  const [text, setText] = useState('');\n  const autoGrowTextArea = event => {\n    setText(event.target.value);\n    event.target.style.height = 'auto';\n    event.target.style.height = `${event.target.scrollHeight}px`;\n  };\n  const sendMessage = async () => {\n    if (text.trim()) {\n      try {\n        // Add user message to the messages state before getting the response\n        onNewMessage({\n          content: text,\n          type: \"user\"\n        });\n\n        // Use getResponse function to get the API response\n        const apiResponse = await getResponse(text);\n\n        // Check if the API response is not null\n        if (apiResponse) {\n          console.log(\"ðŸš€ ~ sendMessage ~ apiResponse:\", apiResponse);\n          // Add API response to the messages state\n          onNewMessage({\n            content: apiResponse.choices[0].message.content,\n            type: \"response\"\n          });\n        } else {\n          // Handle null response here, e.g., show an error message to the user\n        }\n        setText(''); // Clear the text area\n      } catch (error) {\n        console.error('Failed to send message:', error);\n        // Optionally, handle the error for the user interface\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(StyledChatBox, {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      onInput: autoGrowTextArea,\n      value: text,\n      maxLength: \"988\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EnterButton, {\n      onClick: sendMessage,\n      disabled: !text.trim(),\n      children: `>>`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"M8VhbSOru85VOsk7T2j5DvKRp+M=\");\n_c = ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["useState","EnterButton","StyledChatBox","getResponse","jsxDEV","_jsxDEV","ChatBox","onNewMessage","_s","text","setText","autoGrowTextArea","event","target","value","style","height","scrollHeight","sendMessage","trim","content","type","apiResponse","console","log","choices","message","error","children","onInput","maxLength","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/edwinchalmers/turing_work/3mod/dungeongpt/src/Components/ChatBox/ChatBox.js"],"sourcesContent":["import { useState } from \"react\";\nimport { EnterButton, StyledChatBox } from \"./ChatBox.styled.js\";\nimport { getResponse } from \"../../apiCalls.js\"\n\nexport default function ChatBox({ onNewMessage }) {\n  const [text, setText] = useState('');\n\n  const autoGrowTextArea = (event) => {\n    setText(event.target.value);\n    event.target.style.height = 'auto';\n    event.target.style.height = `${event.target.scrollHeight}px`;\n  };\n\n  const sendMessage = async () => {\n    if (text.trim()) {\n      try {\n        // Add user message to the messages state before getting the response\n        onNewMessage({ content: text, type: \"user\" });\n  \n        // Use getResponse function to get the API response\n        const apiResponse = await getResponse(text);\n  \n        // Check if the API response is not null\n        if (apiResponse) {\n          console.log(\"ðŸš€ ~ sendMessage ~ apiResponse:\", apiResponse)\n          // Add API response to the messages state\n          onNewMessage({ content: apiResponse.choices[0].message.content, type: \"response\" });\n        } else {\n          // Handle null response here, e.g., show an error message to the user\n        }\n  \n        setText(''); // Clear the text area\n      } catch (error) {\n        console.error('Failed to send message:', error);\n        // Optionally, handle the error for the user interface\n      }\n    }\n  };\n\n  return (\n    <StyledChatBox>\n      <textarea\n        onInput={autoGrowTextArea}\n        value={text}\n        maxLength=\"988\"\n      ></textarea>\n      <EnterButton onClick={sendMessage} disabled={!text.trim()}>{`>>`}</EnterButton>\n    </StyledChatBox>\n  );\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,EAAEC,aAAa,QAAQ,qBAAqB;AAChE,SAASC,WAAW,QAAQ,mBAAmB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/C,eAAe,SAASC,OAAOA,CAAC;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EAChD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMW,gBAAgB,GAAIC,KAAK,IAAK;IAClCF,OAAO,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAC3BF,KAAK,CAACC,MAAM,CAACE,KAAK,CAACC,MAAM,GAAG,MAAM;IAClCJ,KAAK,CAACC,MAAM,CAACE,KAAK,CAACC,MAAM,GAAI,GAAEJ,KAAK,CAACC,MAAM,CAACI,YAAa,IAAG;EAC9D,CAAC;EAED,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAIT,IAAI,CAACU,IAAI,CAAC,CAAC,EAAE;MACf,IAAI;QACF;QACAZ,YAAY,CAAC;UAAEa,OAAO,EAAEX,IAAI;UAAEY,IAAI,EAAE;QAAO,CAAC,CAAC;;QAE7C;QACA,MAAMC,WAAW,GAAG,MAAMnB,WAAW,CAACM,IAAI,CAAC;;QAE3C;QACA,IAAIa,WAAW,EAAE;UACfC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEF,WAAW,CAAC;UAC3D;UACAf,YAAY,CAAC;YAAEa,OAAO,EAAEE,WAAW,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACN,OAAO;YAAEC,IAAI,EAAE;UAAW,CAAC,CAAC;QACrF,CAAC,MAAM;UACL;QAAA;QAGFX,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;MACf,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C;MACF;IACF;EACF,CAAC;EAED,oBACEtB,OAAA,CAACH,aAAa;IAAA0B,QAAA,gBACZvB,OAAA;MACEwB,OAAO,EAAElB,gBAAiB;MAC1BG,KAAK,EAAEL,IAAK;MACZqB,SAAS,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACZ7B,OAAA,CAACJ,WAAW;MAACkC,OAAO,EAAEjB,WAAY;MAACkB,QAAQ,EAAE,CAAC3B,IAAI,CAACU,IAAI,CAAC,CAAE;MAAAS,QAAA,EAAG;IAAG;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAc,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClE,CAAC;AAEpB;AAAC1B,EAAA,CA7CuBF,OAAO;AAAA+B,EAAA,GAAP/B,OAAO;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}